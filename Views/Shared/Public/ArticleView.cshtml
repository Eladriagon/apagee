@model ArticleListViewModel

@{
    Layout = "Public/_PublicLayout";
    ViewBag.BodyClass = "article";
    var article = Model.Articles.Single();
}

@section head
{
    <link rel="alternate" type="application/activity+json" href="https://@GlobalConfiguration.Current?.PublicHostname/api/users/@GlobalConfiguration.Current?.FediverseUsername/statuses/@article.Article.Uid" />
}

<div class="article">
    <article>
        <header>
            <h1 class="title">@article.Article.Title</h1>

            <div class="published">
                <time datetime="@(article.Article.PublishedOn?.ToString("s"))Z">@(article.Article.PublishedOn?.ToString("MMMM d, yyyy"))</time>
            </div>
        </header>
        
        <section class="content">
            @Html.Raw(article.BodyHtml)
        </div>
    </article>
</div>

<aside class="ata">
    <div class="ata-header">
        Author
    </div>
    
    @if (Model.SiteSettings?.AuthorAvatar is not null)
    {
        <img class="ata-avatar" alt="Profile picture for @(Model.AuthorDisplayName ?? Model.AuthorUsername)" src="/avatar.png" />
    }

    <div class="author">
        @if (Model.AuthorDisplayName is string { Length: > 0 } displayName)
        {
            <span class="display">@displayName</span>
        }
        <span class="username">@@@(Model.AuthorUsername)</span>
    </div>
    @if (Model.AuthorBio is string { Length: > 0 } bio)
    {
        <div class="bio">
            @bio
        </div>
    }
    <div class="properties">
        @foreach (var prop in new[] {
            new { key = Model.SiteSettings?.Property1Key, value = Model.SiteSettings?.Property1Value, valueFormatted = Model.SiteSettings?.Property1Formatted },
            new { key = Model.SiteSettings?.Property2Key, value = Model.SiteSettings?.Property2Value, valueFormatted = Model.SiteSettings?.Property2Formatted },
            new { key = Model.SiteSettings?.Property3Key, value = Model.SiteSettings?.Property3Value, valueFormatted = Model.SiteSettings?.Property3Formatted }
        })
        {
            @if (prop.key is string { Length: > 0} k1
                && prop.value is string { Length: > 0} v1)
            {
                <span class="key">@prop.key</span>   
                <span class="value">@Html.Raw(prop.valueFormatted)</span>   
            }
        }
    </div>
</aside>
